        (read-table *my-read-table*));---------------------------------------------------;   Contents Summary;---------------------------------------------------;;;;  Notes:;;;;      Note structure type;---------------------------------------------------(define-structure-type note    symbol          ;   unique atomic identifier    date-open       ;   date    subject         ;   text header (string)    remarks         ;   text ...    (               ;; handlers:     ((id self)      (note-symbol self))     ((pretty-print self port)      (MAPC #'       #'(LAMBDA (selector)           (cond ((NULL (selector self))                  nil)                 ((MEMBER selector (no-pp-fields self))                  nil)                 ((EQ  (selector-id selector) 'remarks)                  (format port "~%Remarks:")                  (MAPC #'                    #'(LAMBDA (str)                        (format port "~15T~A~%" str))                    (selector self)))                 (else                  (format port "~%~A: ~15T"                          (capitalize (selector-id selector)))                  (pretty-print (selector self) port))))       (stype-selectors note-stype)))     ((print-header self port . args)      (format port "~%~10T~A ~28T~A"          (print-header (note-date-open self) nil)          (note-subject self)))     ((print self port)      (format port "#{Note ~A}"        (object-hash self)))     ((input-prototype self slot-id)      (case slot-id       ((symbol)        #'(LAMBDA () (generate-symbol 'note)))       ((subject)       #'(LAMBDA () (prompted-string-input "Subject: ")))       ((date-open)     #'(LAMBDA () (current_date)))       ((remarks)       #'(LAMBDA () (prompted-string-list-input "Remarks: ")))       (else            #'(LAMBDA () '()))))    ))  ;;  END OF NOTE STRUCTURE DEFINITION;;  set all initial TASK values to NIL(initialize-entire-structure note-stype nil)