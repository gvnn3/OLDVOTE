;;----------------------------------------------------------;;      Edit;;----------------------------------------------------------(defun edit_command (. args)    (let ((slot (caar args)))    (edit-field slot (cdr args))))(defun edit-field (slot args)      (let* ((selector (stype-selector (db-struct *current-db*) slot))           (items (db-current-items *current-db*))           (proc (update-prototype (car items) slot))           )      (MAPC #'#'(LAMBDA (item)              (let ((old_val (selector item)))                (cond ((NULL old_val)                       (format t "~%~A field is empty.  Nothing to edit."                               slot))                      ((not (CONSP old_val))                       (format t "~%~A field is not a list.  Simply replace with command: ~A."                               slot slot))                      (else                       (push-update item selector *current-db*)                       (SETF (selector item)                            (edit-item old_val nil proc))                       (print-header item *STANDARD-OUTPUT*)))))            items)))(defun edit-item (old-val new-val proc)    (cond ((NULL old-val) new-val)        (else         (case (prompt-edit-item (car old-val))           ((delete)  (edit-item (cdr old-val) new-val proc))           ((replace) (edit-item (cdr old-val) (edit-combine new-val (proc)) proc))           ((insert)  (edit-item old-val (edit-combine new-val (proc)) proc))           ((OK)      (edit-item (cdr old-val) (edit-combine new-val (car old-val)) proc))           ((quit)    (edit-combine new-val old-val))           (else   nil)))))(defun prompt-edit-item (value)    (format t "~%~A : ~A"          value          "Edit? ")  (let ((input (lread)))    (case (if input              (char input)              #\return)                      ((#\D #\d) 'delete)      ((#\Y #\y #\R #\r) 'replace)      ((#\I #\i) 'insert)      ((#\Q #\q) 'quit)      ((#\N #\n #\return) 'OK)      (else       (format t "~%Y -- yes, editN -- no, do not editD -- deleteI -- insert new stuff before this itemR -- replace (same as edit)Q -- quitCR -- OK (same as do not edit)")       (prompt-edit-item value)))))            (defun edit-combine (. l)    (flatten (APPLY #'list l)))(defun flatten (l)    (cond ((NULL l) nil)        ((CONSP (car l))         (append (flatten (car l)) (flatten (cdr l))))        ((NULL (car l))         (flatten (cdr l)))        (else         (cons (car l) (flatten (cdr l))))))(DEFVAR edit_undo   #'(LAMBDA args    (undo-field (caar args) (cdr args))))