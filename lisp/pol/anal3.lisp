
(defun tally-party (party)  
  (let ((correct-for 0)
        (correct-agn 0)
        (wrong-for 0)
        (wrong-agn 0)
        )
    (mapc 
     #'(lambda (decision)
       (if (eq party (member-party (decision-member decision)))
           (case (decision-score decision)
             ((+) (case (decision-result decision)
                    ((for) (setf correct-for (1+ correct-for)))
                    ((agn) (setf correct-agn (1+ correct-agn)))))
             ((-) (case (decision-result decision)
                    ((for) (setf wrong-for (1+ wrong-for)))
                    ((agn) (setf wrong-agn (1+ wrong-agn)))))
             (otherwise nil))))
     (db-all decision))
    (print-scores correct-for correct-agn wrong-for wrong-agn)))
