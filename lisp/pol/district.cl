;;        (env t  ;;           (t/t3 new_utils)    ;;         (t/t3 operations))) ;---------------------------------------------------;   pending tasks:;---------------------------------------------------;;;;      - add argument checking      ;;      - add comments;;      - compile;;;---------------------------------------------------;---------------------------------------------------;   related files:;---------------------------------------------------;;;;;;  Environment files:;;      operations: ~/t/t3/operations.t;;      utilities:  ~/t/t3/new_utils.t;;;---------------------------------------------------;---------------------------------------------------;   Contents Summary;---------------------------------------------------;;;  state number incumbent party (define-structure-type district  index     ;; required field for db  current-flag    ;; required field for db  status    ;; required field for db  db        ;; required field for db  date-open ;; required field for db  date-closed     ;; required field for db  ??  ;;;   discretionary fields:  state     ;; string (2-chars)  number    ;; string  name      ;; string ("state-number")  symbol    ;; id / gensym       <<<<< must come after name  sort-key  ;; string  keywords  ;; list of symbols  synonyms  ;; list of symbols  incumbent ;; string  party     ;; symbol (D or R)  instances ;; list of districts  isa       ;; list of symbols  isa-depth ;; string for padding printing.  groups    ;; list of symbols  issues    ;; list of symbols  remarks   ;; ...  notes     ;; list of remarks  (((print self port)    (format port "#{District (~A) ~A}"	    (object-hash self) 	    (district-name self)))      ((inorder? self other)    (if (district? other)        (let ((first (sort-key self))              (second (sort-key other)))           (STRING< first second))        nil))   ((synonyms self)    (let ((name (read-string->list (district-name self))))      (if (= (length name) 1)          (append name (district-synonyms self))          (district-synonyms self))))   ((sort-key self)    (if (district-sort-key self)        (district-sort-key self)        (district-name self)))   ((set-isa-sort self)    (SETF (district-isa-depth self) (isa-depth self district))    (SETF (district-sort-key self) (generate-isa-sort-key self district)))   ((set-alpha-sort self)    (SETF (district-isa-depth self) "")    (SETF (district-sort-key self) (district-name self)))   ((id self)    (cond ((NULL (district-symbol self))           (SETF (district-symbol self)                (generate-symbol 'district)))	  (else (district-symbol self))))      ((print-readable2 self port)    (format port "~%(get-node ~A district)"            (id self)))   ((print-header self port . args)    (ignore args)    (format port "~%~A ~A~A ~A ~10T~A~A~A ~20T~A: ~A"            (case (CHAR *0*(district-status self))              ((#\A #\O) #\space)              ((#\P) #\/)              (else  (CHAR *0*(district-status self))))            (if (district-current-flag self) "*" " ")            (if (db? (district-db self)) "db" "  ")            (district-index self)            (if (db? (district-db self))                (format nil "~S: " (db-name (district-db self)))                "")            (district-isa-depth self)            (district-name self)            (district-party self)            (district-incumbent self)))      ((print-hc self port . args)    (ignore args)    (format port "~A~A~10T~A ~A~%"            (district-isa-depth self)            (district-name self)            (district-party self)            (district-incumbent self))    (MAPC #'     #'(LAMBDA (sel-id)       (let ((selector (car sel-id))             (identifier (cdr sel-id)))         (if (selector self)             (format port "~A  ~A~20T~A~%"                     (district-isa-depth self)                     identifier                     (selector self)))))     (list      (cons synonyms "Names:")      (cons district-isa "ISA:")      (cons district-groups "Groups:")      (cons district-issues "Issues:")      (cons district-keywords "Keywords:"))))   ((pretty-print self port)    (MAPC #'     #'(LAMBDA (selector)       (cond ((NULL (selector self))              nil)             ((MEMBER selector (no-pp-fields self))              nil)             ((EQ  (selector-id selector) 'db)              (format port "~%Db: ~15T")              (print (selector self) port))             ((EQ  (selector-id selector) 'notes)              (format port "~%Notes: ~15T********")              (MAPC #'               #'(LAMBDA (note)                 (pretty-print note port))               (selector self)))                          ((EQ  (selector-id selector) 'remarks)              (format port "~%~A:" (capitalize (selector-id selector)))              (MAPC #'               #'(LAMBDA (str)                 (format port "~15T~A~%" str))               (selector self)))                          (else              (format port "~%~A: ~15T"                      (capitalize (selector-id selector)))              (pretty-print (selector self) port))))     (stype-selectors district-stype)))   ((input-prototype self slot-id)    (case slot-id      ((isa-depth)     #'(LAMBDA () ""))      ((status)        #'(LAMBDA () "Active"))      ((state)         #'(LAMBDA () (prompted-string-input "State: ")))      ((number)        #'(LAMBDA () (prompted-string-input "Number: ")))      ((name)          #'(LAMBDA () (CONCATENATE 'STRING (district-state self) "-"                                                 (district-number self))))      ((symbol)        #'(LAMBDA () (INTERN (district-name self))));;      ((keywords)      (lambda () (prompted-list-input "Keywords: ")))      ((synonyms)      #'(LAMBDA () (prompted-list-input "Synonyms: ")))      ((incumbent)     #'(LAMBDA () (prompted-string-input "Incumbent: ")))      ((party)         #'(LAMBDA () (prompted-string-input "Party: ")));;      ((isa)           (lambda () (prompted-list-input "ISA: ")))      ((issues)        #'(LAMBDA () (prompted-list-input "Issues: ")))      ((groups)        #'(LAMBDA () (prompted-list-input "Groups: ")))      ((date-open)     #'(LAMBDA () (current_date)))      (else            #'(LAMBDA () '()))))   ((update-prototype self slot-id)    (case slot-id      ((status)        #'(LAMBDA () (capitalize (prompted-string-input "Status: "))))      ((state)         #'(LAMBDA () (prompted-string-input "State: ")))      ((number)        #'(LAMBDA () (prompted-string-input "Number: ")))      ((symbol)        #'(LAMBDA () (prompted-symbol-input "Symbol: ")))      ((name)          #'(LAMBDA () (prompted-string-input "Name: ")))      ((remarks)       #'(LAMBDA () (prompted-string-list-input "Remarks: ")))      ((incumbent)     #'(LAMBDA () (prompted-string-input "Incumbent: ")))      ((party)         #'(LAMBDA () (prompted-string-input "Party: ")))      ((date-open)     #'(LAMBDA () (prompted-date-input "Date-open: ")))      ((date-closed)   #'(LAMBDA () (prompted-date-input "Date-closed: ")))      ((db)            #'(LAMBDA () (prompted-string-input "Db: ")))      ((keywords)      #'(LAMBDA () (prompted-list-input "Keywords: ")))      ((synonyms)      #'(LAMBDA () (prompted-list-input "Synonyms: ")))      ((isa)           #'(LAMBDA () (prompted-list-input "ISA: ")))      ((issues)        #'(LAMBDA () (prompted-list-input "Issues: ")))      ((groups)        #'(LAMBDA () (prompted-list-input "Groups: ")))      ((notes)         #'(LAMBDA () (cons (input-values (make-note))                                        (district-notes self))))      (else            #'(LAMBDA () '()))))   ((no-pp-fields self)    (list district-index district-current-flag))   ((no-print-readable-fields self)    (list district-index district-current-flag district-sort-key          district-instances district-isa-depth))      ((table-index-fields self)    (list synonyms id district-isa district-keywords district-issues district-groups))   ))  ;; end of district structure type ;;  (initialize-entire-structure district-stype nil);;----------------------------------------------------------;;      Master Data Base of Districts;;----------------------------------------------------------(DEFVAR district (make-db)) (SETF (db-data-file district) "~/t/db/pol/data/district")(SETF (db-name district) 'district) (SETF (db-prompt district) "DISTRICT> ")(SETF (db-struct district) district-stype)(SETF (db-print-file district) "~/t/db/pol/data/district.print")(SETF (db-commands district)        '(          (date-open (date-open open))          (remarks (remarks text))          (state (state))          (number (number))          (incumbent (incumbent))          (party (party))          (notes (notes note))          (status (status st))          (db (db))          (name (name))          (synonyms (synonyms synonym names))          (keywords (keywords keys key))          (isa (isa))          (groups (groups group))          (issues (issues issue))          ))(init-db district)