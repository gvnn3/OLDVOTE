;; Macintosh HD:lisp:db:data:strategy

;; list of command aliases.
(SETF (db-aliases STRATEGY)  (list  (list  'HC 'HEADER 'CURRENT)
 (list  'PPP 'PREAMBLE)
)
)


;; Items for Database: STRATEGY
(defvar STRATEGY.2683)
(prog1 (setf STRATEGY.2683 (make-instance 'STRATEGY))
(setf (slot-value STRATEGY.2683 'NAME)  "Popular decision") 
(setf (slot-value STRATEGY.2683 'SYNONYMS)  (list  'POPULAR)
) 
(setf (slot-value STRATEGY.2683 'QUOTE)  (list  "I just try to vote my district." "I was sent to Washington to represent the way people back home feel." "This is what the vast majority want." "I owe it to my constiuents if they feel that strongly about it. [Delegate stance]")
) 
(setf (slot-value STRATEGY.2683 'RANK)  "A") 
(setf (slot-value STRATEGY.2683 'TEST)  (list  "All stances are on one side of the bill.  There is either no opposition" "or no support for the given measure.  This vote is a clear case.")
) 
(setf (slot-value STRATEGY.2683 'TEST-CODE)  #'STRAT-POPULAR) 
(setf (slot-value STRATEGY.2683 'PREAMBLE)  'PREAMBLE-POPULAR) 
(setf (slot-value STRATEGY.2683 'PROTOCOL)  'PROTOCOL-POPULAR) 
(setf (slot-value STRATEGY.2683 'EXAMPLE)  (list  'VOTE (list  'QUOTE 'BRUCE)
 (list  'QUOTE 'PLANT-CLOSING)
)
) 
(setf (slot-value STRATEGY.2683 'STATUS)  "Active") 
(setf (slot-value STRATEGY.2683 'DATE-OPEN) (list->date '(4 16 1989))) 
(setf (slot-value STRATEGY.2683 'SYMBOL)  'STRATEGY.2683) 
(setf (slot-value STRATEGY.2683 'REMARKS)  (list  "Vote is consistent with all constituencies.")
) )
(insert-item STRATEGY STRATEGY.2683)
(defvar STRATEGY.3154)
(prog1 (setf STRATEGY.3154 (make-instance 'STRATEGY))
(setf (slot-value STRATEGY.3154 'NAME)  "Non-partisan decision") 
(setf (slot-value STRATEGY.3154 'SYNONYMS)  (list  'NON-PARTISAN)
) 
(setf (slot-value STRATEGY.3154 'QUOTE)  (list  "Sometimes party loyalty demands too much. (JFK)")
) 
(setf (slot-value STRATEGY.3154 'RANK)  "B") 
(setf (slot-value STRATEGY.3154 'TEST)  (list  "The member's own beliefs are in conflict with the party position on the bill." "The most important credo stance is an A, and the member's political party" "has a stance supporting the opposing side.")
) 
(setf (slot-value STRATEGY.3154 'TEST-CODE)  #'STRAT-NON-PARTISAN) 
(setf (slot-value STRATEGY.3154 'PREAMBLE)  'PREAMBLE-NON-PARTISAN) 
(setf (slot-value STRATEGY.3154 'PROTOCOL)  'PROTOCOL-NON-PARTISAN) 
(setf (slot-value STRATEGY.3154 'EXAMPLE)  (list  'VOTE (list  'QUOTE 'MORRISON)
 (list  'QUOTE 'X3)
)
) 
(setf (slot-value STRATEGY.3154 'STATUS)  "Active") 
(setf (slot-value STRATEGY.3154 'DATE-OPEN) (list->date '(4 16 1989))) 
(setf (slot-value STRATEGY.3154 'SYMBOL)  'STRATEGY.3154) 
(setf (slot-value STRATEGY.3154 'REMARKS)  (list  "Vote of conscience or credo that violates party line.  Not a district vote.")
) )
(insert-item STRATEGY STRATEGY.3154)
(defvar STRATEGY.1344)
(prog1 (setf STRATEGY.1344 (make-instance 'STRATEGY))
(setf (slot-value STRATEGY.1344 'NAME)  "Not constitutional") 
(setf (slot-value STRATEGY.1344 'SYNONYMS)  (list  'NOT-CONSTITUTIONAL)
) 
(setf (slot-value STRATEGY.1344 'RANK)  "B") 
(setf (slot-value STRATEGY.1344 'TEST)  (list  "There is a consensus opposing the measure.  One issue among the" "opposing stances is the Constitution.")
) 
(setf (slot-value STRATEGY.1344 'TEST-CODE)  #'STRAT-NOT-CONSTITUTIONAL) 
(setf (slot-value STRATEGY.1344 'PREAMBLE)  'PREAMBLE-NOT-CONSTITUTIONAL) 
(setf (slot-value STRATEGY.1344 'PROTOCOL)  'PROTOCOL-NOT-CONSTITUTIONAL) 
(setf (slot-value STRATEGY.1344 'STATUS)  "Active") 
(setf (slot-value STRATEGY.1344 'DATE-OPEN) (list->date '(4 24 1989))) 
(setf (slot-value STRATEGY.1344 'SYMBOL)  'STRATEGY.1344) 
(setf (slot-value STRATEGY.1344 'REMARKS)  (list  "Vote against a measure that would be struck down by " "the Supreme Court.")
) )
(insert-item STRATEGY STRATEGY.1344)
(defvar STRATEGY.681)
(prog1 (setf STRATEGY.681 (make-instance 'STRATEGY))
(setf (slot-value STRATEGY.681 'NAME)  "Unimportant Bill") 
(setf (slot-value STRATEGY.681 'SYNONYMS)  (list  'UNIMPORTANT-BILL)
) 
(setf (slot-value STRATEGY.681 'QUOTE)  (list  "... some things that are close calls are not treated" "as close calls because they're not important enough.  I mean" "its very different if there's enough riding -- either substantively" "or politically -- on a vote.  You might have exactly the same" "tensions among the various priorities if you were to pull " "this up, but it might be about how you spend $100,000 and you" "say, who cares.")
) 
(setf (slot-value STRATEGY.681 'RANK)  "B") 
(setf (slot-value STRATEGY.681 'TEST)  (list  "There is a consensus on the bill.  The importance level of the bill is C.")
) 
(setf (slot-value STRATEGY.681 'TEST-CODE)  #'STRAT-UNIMPORTANT-BILL) 
(setf (slot-value STRATEGY.681 'PREAMBLE)  'PREAMBLE-UNIMPORTANT-BILL) 
(setf (slot-value STRATEGY.681 'PROTOCOL)  'PROTOCOL-UNIMPORTANT-BILL) 
(setf (slot-value STRATEGY.681 'STATUS)  "Active") 
(setf (slot-value STRATEGY.681 'DATE-OPEN) (list->date '(5 22 1989))) 
(setf (slot-value STRATEGY.681 'SYMBOL)  'STRATEGY.681) 
(setf (slot-value STRATEGY.681 'REMARKS)  (list  "Not much riding on this bill.")
) )
(insert-item STRATEGY STRATEGY.681)
(defvar STRATEGY.1018)
(prog1 (setf STRATEGY.1018 (make-instance 'STRATEGY))
(setf (slot-value STRATEGY.1018 'NAME)  "Simple consensus") 
(setf (slot-value STRATEGY.1018 'SYNONYMS)  (list  'SIMPLE-CONSENSUS)
) 
(setf (slot-value STRATEGY.1018 'RANK)  "C") 
(setf (slot-value STRATEGY.1018 'TEST)  (list  "There is a consensus of opinion on the issues.  That is, all the " "most important stances fall on one side of the bill.")
) 
(setf (slot-value STRATEGY.1018 'TEST-CODE)  #'STRAT-SIMPLE-CONSENSUS) 
(setf (slot-value STRATEGY.1018 'PREAMBLE)  'PREAMBLE-SIMPLE-CONSENSUS) 
(setf (slot-value STRATEGY.1018 'PROTOCOL)  'PROTOCOL-SIMPLE-CONSENSUS) 
(setf (slot-value STRATEGY.1018 'STATUS)  "Active") 
(setf (slot-value STRATEGY.1018 'DATE-OPEN) (list->date '(5 11 1989))) 
(setf (slot-value STRATEGY.1018 'SYMBOL)  'STRATEGY.1018) 
(setf (slot-value STRATEGY.1018 'REMARKS)  (list  "The most important issues/groups/norms etc. concur.")
) )
(insert-item STRATEGY STRATEGY.1018)
(defvar STRATEGY.1423)
(prog1 (setf STRATEGY.1423 (make-instance 'STRATEGY))
(setf (slot-value STRATEGY.1423 'NAME)  "Minimize adverse effects") 
(setf (slot-value STRATEGY.1423 'SYNONYMS)  (list  'MINIMIZE-ADVERSE-EFFECTS)
) 
(setf (slot-value STRATEGY.1423 'QUOTE)  (list  "Nothing's perfect.  You have to break a few eggs to make" "omelets.")
) 
(setf (slot-value STRATEGY.1423 'RANK)  "C") 
(setf (slot-value STRATEGY.1423 'TEST)  (list  "There is a majority opinion.  The importance level of the stances" "in support of the majority is greater than the importance level of" "the other side.")
) 
(setf (slot-value STRATEGY.1423 'TEST-CODE)  #'STRAT-MINIMIZE-ADVERSE-EFFECTS) 
(setf (slot-value STRATEGY.1423 'PREAMBLE)  'PREAMBLE-MINIMIZE-ADVERSE-EFFECTS) 
(setf (slot-value STRATEGY.1423 'PROTOCOL)  'PROTOCOL-MINIMIZE-ADVERSE-EFFECTS) 
(setf (slot-value STRATEGY.1423 'STATUS)  "Active") 
(setf (slot-value STRATEGY.1423 'DATE-OPEN) (list->date '(5 3 1989))) 
(setf (slot-value STRATEGY.1423 'SYMBOL)  'STRATEGY.1423) 
(setf (slot-value STRATEGY.1423 'REMARKS)  (list  "Adverse effects are less important than the benefits of the vote.")
) )
(insert-item STRATEGY STRATEGY.1423)
(defvar STRATEGY.3153)
(prog1 (setf STRATEGY.3153 (make-instance 'STRATEGY))
(setf (slot-value STRATEGY.3153 'NAME)  "Partisan Decision") 
(setf (slot-value STRATEGY.3153 'SYNONYMS)  (list  'PARTISAN)
) 
(setf (slot-value STRATEGY.3153 'QUOTE)  (list  "I could not let those rich Republicans tear this country apart." "I am not going to let those Democrats have their special interests tell" "  me what to do.")
) 
(setf (slot-value STRATEGY.3153 'RANK)  "C") 
(setf (slot-value STRATEGY.3153 'TEST)  (list  "There is a majority opinion on the bill.  The member's political opponents" "favor the opposite result.  The most important majority stance is less" "important than the most important opposition stance.  Thus, the member" "is voting to deny something wanted by the opposition." "In this case, the opposition is any group with which the member has a CON relationship.")
) 
(setf (slot-value STRATEGY.3153 'TEST-CODE)  #'STRAT-PARTISAN) 
(setf (slot-value STRATEGY.3153 'PREAMBLE)  'PREAMBLE-PARTISAN) 
(setf (slot-value STRATEGY.3153 'PROTOCOL)  'PROTOCOL-PARTISAN) 
(setf (slot-value STRATEGY.3153 'STATUS)  "Active") 
(setf (slot-value STRATEGY.3153 'DATE-OPEN) (list->date '(4 16 1989))) 
(setf (slot-value STRATEGY.3153 'SYMBOL)  'STRATEGY.3153) 
(setf (slot-value STRATEGY.3153 'REMARKS)  (list  "Counter-planning vote against the opposing interests.")
) )
(insert-item STRATEGY STRATEGY.3153)
(defvar STRATEGY.3152)
(prog1 (setf STRATEGY.3152 (make-instance 'STRATEGY))
(setf (slot-value STRATEGY.3152 'NAME)  "Best for the country") 
(setf (slot-value STRATEGY.3152 'SYNONYMS)  (list  'BEST-FOR-THE-COUNTRY)
) 
(setf (slot-value STRATEGY.3152 'QUOTE)  (list  "The needs of the country, in this case, must come first.")
) 
(setf (slot-value STRATEGY.3152 'RANK)  "C") 
(setf (slot-value STRATEGY.3152 'TEST)  (list  "There is a consensus opinion on the bill.  The consensus result " "contains stances reflecting the country's broad issue agenda.")
) 
(setf (slot-value STRATEGY.3152 'TEST-CODE)  #'STRAT-BEST-FOR-COUNTRY) 
(setf (slot-value STRATEGY.3152 'PREAMBLE)  'PREAMBLE-BEST-FOR-THE-COUNTRY) 
(setf (slot-value STRATEGY.3152 'PROTOCOL)  'PROTOCOL-BEST-FOR-THE-COUNTRY) 
(setf (slot-value STRATEGY.3152 'STATUS)  "Active") 
(setf (slot-value STRATEGY.3152 'DATE-OPEN) (list->date '(4 16 1989))) 
(setf (slot-value STRATEGY.3152 'SYMBOL)  'STRATEGY.3152) 
(setf (slot-value STRATEGY.3152 'REMARKS)  (list  "Take the broad view, over parochial interests.")
) )
(insert-item STRATEGY STRATEGY.3152)
(defvar STRATEGY.3283)
(prog1 (setf STRATEGY.3283 (make-instance 'STRATEGY))
(setf (slot-value STRATEGY.3283 'NAME)  "Shifting alliances") 
(setf (slot-value STRATEGY.3283 'SYNONYMS)  (list  'SHIFTING-ALLIANCES)
) 
(setf (slot-value STRATEGY.3283 'QUOTE)  (list  "I am voting with my good friends in ().  I am sorry to disappoint" "my many supporters in ().  They know that I have fought many fights" "with them.")
) 
(setf (slot-value STRATEGY.3283 'RANK)  "C") 
(setf (slot-value STRATEGY.3283 'TEST)  (list  "The member has no credo stance on this bill." "There are constituencies on opposite sides of the issues." "One of the constituencies is in conflict with the member on another" "issue, or one of the constituencies is in agreement with the member" "on another issue.  Then, the member sides with the constituency that" "is ideologically closer." "The member lowers the importance of the other relationship.")
) 
(setf (slot-value STRATEGY.3283 'TEST-CODE)  #'STRAT-SHIFTING-ALLIANCES) 
(setf (slot-value STRATEGY.3283 'PREAMBLE)  'PREAMBLE-SHIFTING-ALLIANCES) 
(setf (slot-value STRATEGY.3283 'PROTOCOL)  'PROTOCOL-SHIFTING-ALLIANCES) 
(setf (slot-value STRATEGY.3283 'STATUS)  "Active") 
(setf (slot-value STRATEGY.3283 'DATE-OPEN) (list->date '(4 16 1989))) 
(setf (slot-value STRATEGY.3283 'SYMBOL)  'STRATEGY.3283) 
(setf (slot-value STRATEGY.3283 'REMARKS)  (list  "Conflict resolution through changing relations." "When two constituencies are in conflict, try to see if one is more" "valuable or compatible than the other.  If so, shift their relative" "importance by either lowering one or raising the other.")
) )
(insert-item STRATEGY STRATEGY.3283)
(defvar STRATEGY.1291)
(prog1 (setf STRATEGY.1291 (make-instance 'STRATEGY))
(setf (slot-value STRATEGY.1291 'NAME)  "Inconsistent constituency") 
(setf (slot-value STRATEGY.1291 'SYNONYMS)  (list  'INCONSISTENT-CONSTITUENCY)
) 
(setf (slot-value STRATEGY.1291 'RANK)  "C") 
(setf (slot-value STRATEGY.1291 'TEST)  (list  "The same group has positions on both sides of the same bill and there" "is a consensus of opinion on one side of the bill.")
) 
(setf (slot-value STRATEGY.1291 'TEST-CODE)  #'STRAT-INCONSISTENT-CONSTITUENCY) 
(setf (slot-value STRATEGY.1291 'PREAMBLE)  'PREAMBLE-INCONSISTENT-CONSTITUENCY) 
(setf (slot-value STRATEGY.1291 'PROTOCOL)  'PROTOCOL-INCONSISTENT-CONSTITUENCY) 
(setf (slot-value STRATEGY.1291 'EXAMPLE)  (list  'VOTE (list  'QUOTE 'BIRCHER)
 (list  'QUOTE 'RETAIN-GUN-CONTROL)
)
) 
(setf (slot-value STRATEGY.1291 'STATUS)  "Active") 
(setf (slot-value STRATEGY.1291 'DATE-OPEN) (list->date '(4 28 1989))) 
(setf (slot-value STRATEGY.1291 'SYMBOL)  'STRATEGY.1291) 
(setf (slot-value STRATEGY.1291 'REMARKS)  (list  "Bill has aspects that provide conflict within a given" "constituency.  Member can make decision on other grounds and" "couch explanation in terms of favorable aspects of decision.")
) )
(insert-item STRATEGY STRATEGY.1291)
(defvar STRATEGY.2588)
(prog1 (setf STRATEGY.2588 (make-instance 'STRATEGY))
(setf (slot-value STRATEGY.2588 'NAME)  "Not good enough") 
(setf (slot-value STRATEGY.2588 'SYNONYMS)  (list  'NOT-GOOD-ENOUGH)
) 
(setf (slot-value STRATEGY.2588 'QUOTE)  (list  "I would have voted for a stronger bill." "This measure is a fraud.  It has no teeth in it.")
) 
(setf (slot-value STRATEGY.2588 'RANK)  "C") 
(setf (slot-value STRATEGY.2588 'TEST)  (list  "There is a majority opinion in favor of the bill.  However, the importance of" "the most important stance favoring the bill is greater than the most " "important consequence of the bill.")
) 
(setf (slot-value STRATEGY.2588 'TEST-CODE)  #'STRAT-NOT-GOOD-ENOUGH) 
(setf (slot-value STRATEGY.2588 'PREAMBLE)  'PREAMBLE-NOT-GOOD-ENOUGH) 
(setf (slot-value STRATEGY.2588 'PROTOCOL)  'PROTOCOL-NOT-GOOD-ENOUGH) 
(setf (slot-value STRATEGY.2588 'STATUS)  "Active") 
(setf (slot-value STRATEGY.2588 'DATE-OPEN) (list->date '(4 16 1989))) 
(setf (slot-value STRATEGY.2588 'SYMBOL)  'STRATEGY.2588) 
(setf (slot-value STRATEGY.2588 'REMARKS)  (list  "Bill importance is less than my own stances would call for." "For example, personal stance of A, bill importance of C.")
) )
(insert-item STRATEGY STRATEGY.2588)
(defvar STRATEGY.2684)
(prog1 (setf STRATEGY.2684 (make-instance 'STRATEGY))
(setf (slot-value STRATEGY.2684 'NAME)  "Balance the books") 
(setf (slot-value STRATEGY.2684 'SYNONYMS)  (list  'BALANCE-THE-BOOKS)
) 
(setf (slot-value STRATEGY.2684 'QUOTE)  (list  "I know you are upset with this vote, but I have always been there in the" "  past, and I shall be there in the future." "I will make it up to you." "(point to specific past votes)")
) 
(setf (slot-value STRATEGY.2684 'RANK)  "C") 
(setf (slot-value STRATEGY.2684 'TEST)  (list  "There is a majority opinion on this bill.  The member's record" "has positions that fall on both sides of the bill.")
) 
(setf (slot-value STRATEGY.2684 'TEST-CODE)  #'STRAT-BALANCE-THE-BOOKS) 
(setf (slot-value STRATEGY.2684 'PREAMBLE)  'PREAMBLE-BALANCE-THE-BOOKS) 
(setf (slot-value STRATEGY.2684 'PROTOCOL)  'PROTOCOL-BALANCE-THE-BOOKS) 
(setf (slot-value STRATEGY.2684 'STATUS)  "Active") 
(setf (slot-value STRATEGY.2684 'DATE-OPEN) (list->date '(4 16 1989))) 
(setf (slot-value STRATEGY.2684 'SYMBOL)  'STRATEGY.2684) 
(setf (slot-value STRATEGY.2684 'REMARKS)  (list  "Offset current vote with past or future votes.")
) )
(insert-item STRATEGY STRATEGY.2684)
(defvar STRATEGY.274)
(prog1 (setf STRATEGY.274 (make-instance 'STRATEGY))
(setf (slot-value STRATEGY.274 'NAME)  "Simple Majority") 
(setf (slot-value STRATEGY.274 'SYNONYMS)  (list  'SIMPLE-MAJORITY 'MAJORITY)
) 
(setf (slot-value STRATEGY.274 'RANK)  "D") 
(setf (slot-value STRATEGY.274 'TEST)  (list  "There is a majority of opinion on one side of the bill.  The greater" "number of stances constitutes a majority.")
) 
(setf (slot-value STRATEGY.274 'TEST-CODE)  #'STRAT-SIMPLE-MAJORITY) 
(setf (slot-value STRATEGY.274 'PREAMBLE)  'PREAMBLE-SIMPLE-MAJORITY) 
(setf (slot-value STRATEGY.274 'PROTOCOL)  'PROTOCOL-SIMPLE-MAJORITY) 
(setf (slot-value STRATEGY.274 'STATUS)  "Active") 
(setf (slot-value STRATEGY.274 'DATE-OPEN) (list->date '(2 15 1990))) 
(setf (slot-value STRATEGY.274 'SYMBOL)  'STRATEGY.274) 
(setf (slot-value STRATEGY.274 'REMARKS)  (list  "More stances on one side than another.")
) )
(insert-item STRATEGY STRATEGY.274)
(defvar STRATEGY.7685)
(prog1 (setf STRATEGY.7685 (make-instance 'STRATEGY))
(setf (slot-value STRATEGY.7685 'NAME)  "Normative decision") 
(setf (slot-value STRATEGY.7685 'SYNONYMS)  (list  'NORMATIVE)
) 
(setf (slot-value STRATEGY.7685 'RANK)  "D") 
(setf (slot-value STRATEGY.7685 'TEST)  (list  "The normative issue stances all fall on one side of the bill.")
) 
(setf (slot-value STRATEGY.7685 'TEST-CODE)  #'STRAT-NORMATIVE) 
(setf (slot-value STRATEGY.7685 'PREAMBLE)  'PREAMBLE-NORMATIVE) 
(setf (slot-value STRATEGY.7685 'PROTOCOL)  'PROTOCOL-NORMATIVE) 
(setf (slot-value STRATEGY.7685 'EXAMPLE)  (list  'VOTE (list  'QUOTE 'SHAYS)
 (list  'QUOTE 'X3)
)
) 
(setf (slot-value STRATEGY.7685 'STATUS)  "Active") 
(setf (slot-value STRATEGY.7685 'DATE-OPEN) (list->date '(4 23 1989))) 
(setf (slot-value STRATEGY.7685 'SYMBOL)  'STRATEGY.7685) 
(setf (slot-value STRATEGY.7685 'REMARKS)  (list  "Decision reflects normative opinion on relevant issues.")
) )
(insert-item STRATEGY STRATEGY.7685)
(defvar STRATEGY.323)
(prog1 (setf STRATEGY.323 (make-instance 'STRATEGY))
(setf (slot-value STRATEGY.323 'NAME)  "Deeper analysis") 
(setf (slot-value STRATEGY.323 'SYNONYMS)  (list  'DEEPER-ANALYSIS)
) 
(setf (slot-value STRATEGY.323 'RANK)  "E") 
(setf (slot-value STRATEGY.323 'TEST)  (list  "This is a meta-strategy.  First expand the bill stances through " "inference, then run through the preceding decision strategies again." "If that fails, then try a deeper level of inference.  Inferencing is" "triggered by the level of importance of the stances.  Process stops" "at the D level.")
) 
(setf (slot-value STRATEGY.323 'TEST-CODE)  #'STRAT-DEEPER-ANALYSIS) 
(setf (slot-value STRATEGY.323 'STATUS)  "Active") 
(setf (slot-value STRATEGY.323 'DATE-OPEN) (list->date '(2 11 1990))) 
(setf (slot-value STRATEGY.323 'SYMBOL)  'STRATEGY.323) 
(setf (slot-value STRATEGY.323 'REMARKS)  (list  "Consider the symbolic implication of the for/agn stances of the bill.")
) )
(insert-item STRATEGY STRATEGY.323)
(defvar STRATEGY.1113)
(prog1 (setf STRATEGY.1113 (make-instance 'STRATEGY))
(setf (slot-value STRATEGY.1113 'NAME)  "No decision") 
(setf (slot-value STRATEGY.1113 'SYNONYMS)  (list  'NO-DECISION)
) 
(setf (slot-value STRATEGY.1113 'RANK)  "F") 
(setf (slot-value STRATEGY.1113 'TEST)  (list  "Always true.  If you have gotten this far, then there is no decision" "strategy that is effective for this bill.")
) 
(setf (slot-value STRATEGY.1113 'TEST-CODE)  #'STRAT-NO-DECISION) 
(setf (slot-value STRATEGY.1113 'PROTOCOL)  'PROTOCOL-NO-DECISION) 
(setf (slot-value STRATEGY.1113 'NO-SECOND-TRY)  'T) 
(setf (slot-value STRATEGY.1113 'STATUS)  "Active") 
(setf (slot-value STRATEGY.1113 'DATE-OPEN) (list->date '(8 22 1989))) 
(setf (slot-value STRATEGY.1113 'SYMBOL)  'STRATEGY.1113) 
(setf (slot-value STRATEGY.1113 'REMARKS)  (list  "No previous decision was triggered.")
) )
(insert-item STRATEGY STRATEGY.1113)
(defvar STRATEGY.3156)
(prog1 (setf STRATEGY.3156 (make-instance 'STRATEGY))
(setf (slot-value STRATEGY.3156 'NAME)  "Mixed constituency") 
(setf (slot-value STRATEGY.3156 'SYNONYMS)  (list  'MIXED-CONSTITUENCY)
) 
(setf (slot-value STRATEGY.3156 'RANK)  "X") 
(setf (slot-value STRATEGY.3156 'TEST)  (list  "District must be divided and there should be symmetry on stances.")
) 
(setf (slot-value STRATEGY.3156 'PREAMBLE)  'PREAMBLE-MIXED-CONSTITUENCY) 
(setf (slot-value STRATEGY.3156 'PROTOCOL)  'PROTOCOL-MIXED-CONSTITUENCY) 
(setf (slot-value STRATEGY.3156 'STATUS)  "Active") 
(setf (slot-value STRATEGY.3156 'DATE-OPEN) (list->date '(4 16 1989))) 
(setf (slot-value STRATEGY.3156 'SYMBOL)  'STRATEGY.3156) 
(setf (slot-value STRATEGY.3156 'REMARKS)  (list  "E.g., rural/urban. can justify pro-rural vote to urbans by " "pointing to other constituency, and vice-versa.")
) )
(insert-item STRATEGY STRATEGY.3156)
(defvar STRATEGY.3155)
(prog1 (setf STRATEGY.3155 (make-instance 'STRATEGY))
(setf (slot-value STRATEGY.3155 'NAME)  "Inoculation") 
(setf (slot-value STRATEGY.3155 'SYNONYMS)  (list  'INOCULATION)
) 
(setf (slot-value STRATEGY.3155 'RANK)  "X") 
(setf (slot-value STRATEGY.3155 'TEST)  (list  "Low priority stances, pro or con.")
) 
(setf (slot-value STRATEGY.3155 'TEST-CODE)  #'STRAT-INOCULATION) 
(setf (slot-value STRATEGY.3155 'PREAMBLE)  'PREAMBLE-INOCULATION) 
(setf (slot-value STRATEGY.3155 'PROTOCOL)  'PROTOCOL-INOCULATION) 
(setf (slot-value STRATEGY.3155 'STATUS)  "Active") 
(setf (slot-value STRATEGY.3155 'DATE-OPEN) (list->date '(4 16 1989))) 
(setf (slot-value STRATEGY.3155 'SYMBOL)  'STRATEGY.3155) 
(setf (slot-value STRATEGY.3155 'REMARKS)  (list  "Decision which may prove to be unpopular later on." "Need to begin laying groundwork for defense early on.")
) )
(insert-item STRATEGY STRATEGY.3155)
(defvar STRATEGY.3157)
(prog1 (setf STRATEGY.3157 (make-instance 'STRATEGY))
(setf (slot-value STRATEGY.3157 'NAME)  "It couldn't pass") 
(setf (slot-value STRATEGY.3157 'SYNONYMS)  (list  'IT-COULD-NOT-PASS)
) 
(setf (slot-value STRATEGY.3157 'QUOTE)  (list  "Why waste a vote on a measure that has so little chance of passing.")
) 
(setf (slot-value STRATEGY.3157 'RANK)  "X") 
(setf (slot-value STRATEGY.3157 'TEST)  (list  "Bill has far higher importance (and low likelihood of passage)" "but for issue stance consistent (but stronger than) with my own." "This is the flip side of not-good-enough.")
) 
(setf (slot-value STRATEGY.3157 'TEST-CODE)  #'STRAT-COULD-NOT-PASS) 
(setf (slot-value STRATEGY.3157 'PREAMBLE)  'PREAMBLE-IT-COULD-NOT-PASS) 
(setf (slot-value STRATEGY.3157 'PROTOCOL)  'PROTOCOL-IT-COULD-NOT-PASS) 
(setf (slot-value STRATEGY.3157 'STATUS)  "Active") 
(setf (slot-value STRATEGY.3157 'DATE-OPEN) (list->date '(4 16 1989))) 
(setf (slot-value STRATEGY.3157 'SYMBOL)  'STRATEGY.3157) 
(setf (slot-value STRATEGY.3157 'REMARKS)  (list  "Do not waste a vote on a symbolic measure.  Better to" "build credibility and a consensus for the future.")
) )
(insert-item STRATEGY STRATEGY.3157)
(defvar STRATEGY.3284)
(prog1 (setf STRATEGY.3284 (make-instance 'STRATEGY))
(setf (slot-value STRATEGY.3284 'NAME)  "Change of heart") 
(setf (slot-value STRATEGY.3284 'SYNONYMS)  (list  'CHANGE-OF-HEART)
) 
(setf (slot-value STRATEGY.3284 'QUOTE)  (list  "A foolish consistency is the hobgoblin of small minds.")
) 
(setf (slot-value STRATEGY.3284 'RANK)  "X") 
(setf (slot-value STRATEGY.3284 'TEST)  (list  "Credo importance is less than conflicting relation importance.")
) 
(setf (slot-value STRATEGY.3284 'TEST-CODE)  #'STRAT-CHANGE-OF-HEART) 
(setf (slot-value STRATEGY.3284 'PREAMBLE)  'PREAMBLE-CHANGE-OF-HEART) 
(setf (slot-value STRATEGY.3284 'PROTOCOL)  'PROTOCOL-CHANGE-OF-HEART) 
(setf (slot-value STRATEGY.3284 'STATUS)  "Active") 
(setf (slot-value STRATEGY.3284 'DATE-OPEN) (list->date '(4 16 1989))) 
(setf (slot-value STRATEGY.3284 'SYMBOL)  'STRATEGY.3284) 
(setf (slot-value STRATEGY.3284 'REMARKS)  (list  "Reverse a credo/vote position on the record to accomodate " "conflict in constituencies.")
) )
(insert-item STRATEGY STRATEGY.3284)