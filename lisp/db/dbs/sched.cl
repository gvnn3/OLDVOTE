;;  Prints out items from task dbase that are overdue or coming up within the;;  next week or given period.(defun sched (. args)    (load-dbs (list task))  (labels ((period (if (NUMBERP (caar args))                       (caar args)                       7))           (a-week (add-days (current_date) period))           ((due-soon? item)            (cond ((task-date-due item)                   ***=>***                    #'(LAMBDA (date)                     (date-before? date a-week)))                  (else nil)))           (all-tasks  (get-all-tasks (db-all task)))           (tasks-due-soon (collect all-tasks due-soon?))           )    (MAPC #'     #'(LAMBDA (item)       (print-header item *STANDARD-OUTPUT*))     tasks-due-soon)    (VALUES)))(defun get-all-tasks (items)    (cond ((NULL items) nil)        ((db? (task-db (car items)))         (append (get-all-tasks (db-all (task-db (car items))))                 (get-all-tasks (cdr items))))        (else         (cons (car items)               (get-all-tasks (cdr items))))))