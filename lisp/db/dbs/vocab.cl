;---------------------------------------------------;   Contents Summary;---------------------------------------------------;;;;  Tasks:;;;;      Vocab structure type;---------------------------------------------------(define-structure-type vocab    symbol          ;   unique atomic identifier    word         ;   text header (string)    source       ;   text (string)    definition         ;   text ...;; required fields    index           ;   order in schedule    status          ;   Open, Pending, Closed (string)    date-open       ;   date    date-closed     ;   date    current-flag    ;   true if selected, else nil    keywords        ;   keys for indexing db table    db              ;   recursive db slot    (               ;; handlers:     ((id self)      (vocab-symbol self))     ((pretty-print self port)      (MAPC #'       #'(LAMBDA (selector)           (cond ((NULL (selector self))                  nil)                 ((MEMBER selector (no-pp-fields self))                  nil)                 ((EQ  (selector-id selector) 'db)                  (format port "~%Db: ~15T")                  (print (selector self) port))                 ((EQ  (selector-id selector) 'definition)                  (format port "~%Definition:")                  (MAPC #'                    #'(LAMBDA (str)                        (format port "~%~A" str))                    (selector self)))                 (else                  (format port "~%~A: ~15T"                          (capitalize (selector-id selector)))                  (pretty-print (selector self) port))))       (stype-selectors vocab-stype)))     ((inorder? self other)      (if (vocab? other)          (let ((word1 (vocab-word self))                (word2 (vocab-word other)))            (inorder? word1 word2))))     ((print-header self port . args)      (format port "~%~A ~A~A ~A ~10T~A~A"          (case (CHAR *0*(vocab-status self))            ((#\A #\O) #\space)            ((#\P) #\/)            (else  (CHAR *0*(vocab-status self))))          (if (vocab-current-flag self) "*" " ")          (if (db? (vocab-db self)) "db" "  ")          (vocab-index self)          (if (db? (vocab-db self))              (format nil "~S: " (db-name (vocab-db self)))              "")          (vocab-word self)))     ((print-hc self port . args)      (let ((indent (if args (car args) "")))        (format port "~%~A ~A ~6T~A~A~A"                (case (CHAR *0*(vocab-status self))                  ((#\A #\O) #\space)                  ((#\P) #\/)                  (else  (CHAR *0*(vocab-status self))))                (if (db? (vocab-db self)) "db" "  ")                indent                (if (db? (vocab-db self))                    (format nil "~S: " (db-name (vocab-db self)))                    "")                (vocab-word self))        (if (db? (vocab-db self))            (MAPC #'             #'(LAMBDA (item)               (print-hc item port (CONCATENATE 'STRING indent "  ")))             (db-all (vocab-db self))))))     ((print self port)      (format port "#{Vocab ~A Word: ~A}"        (object-hash self)        (vocab-word self)))     ((input-prototype self slot-id)      (case slot-id       ((symbol)        #'(LAMBDA () (generate-symbol 'vocab)))       ((status)        #'(LAMBDA () "Active"))       ((word)       #'(LAMBDA () (prompted-string-input "Word: ")))       ((date-open)     #'(LAMBDA () (current_date)))       (else            #'(LAMBDA () '()))))     ((update-prototype self slot-id)      (case slot-id       ((status)        #'(LAMBDA () (capitalize (prompted-string-input "Status: "))))       ((word)       #'(LAMBDA () (prompted-string-input "Word: ")))       ((definition)       #'(LAMBDA () (prompted-string-list-input "Definition: ")))       ((date-open)     #'(LAMBDA () (prompted-date-input "Date-open: ")))       ((date-closed)   #'(LAMBDA () (prompted-date-input "Date-closed: ")))       ((source)        #'(LAMBDA () (prompted-string-input "Source: ")))       ((keywords)      #'(LAMBDA () (prompted-list-input "Keywords: ")))       ((db)            #'(LAMBDA () (prompted-string-input "Db: ")))       (else            #'(LAMBDA () '()))))     ((no-pp-fields self)      (list vocab-index vocab-current-flag))     ((no-print-readable-fields self)      (list vocab-index vocab-current-flag))     ((table-index-fields self)      (list vocab-keywords vocab-word vocab-source))    ))  ;;  END OF VOCAB STRUCTURE DEFINITION;;  set all initial VOCAB values to NIL(initialize-entire-structure vocab-stype nil);;----------------------------------------------------------;;      Master Database for Vocab;;----------------------------------------------------------(DEFVAR vocab (make-db)) (SETF (db-data-file vocab) "~/t/db/data/vocab")(SETF (db-name vocab) 'vocab) (SETF (db-prompt vocab) "VOCAB> ")(SETF (db-struct vocab) vocab-stype)(SETF (db-print-file vocab) "~/t/db/data/vocab.print")(SETF (db-commands vocab)        '(          (source (source))          (date-closed (date-closed closed))          (date-open (date-open open))          (definition (definition define def))          (status (status st))          (word (word))          (keywords (keywords keys))          (db (db))          ))(init-db vocab)