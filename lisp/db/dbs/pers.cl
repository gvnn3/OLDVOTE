;---------------------------------------------------;   Contents Summary;---------------------------------------------------(define-structure-type location  persons   ;; list of people at this address  phone     ;; string  type      ;; symbol (home work email)  symbol    ;; id / gensym  address   ;; list of strings)(define-structure-type pers  index     ;; required field for db  current-flag    ;; required field for db  status    ;; required field for db  db        ;; required field for db  date-open ;; required field for db  date-closed     ;; required field for db  ??  ;;;   discretionary fields:  symbol    ;; id / gensym  name      ;; string  fname     ;; symbol  lname     ;; symbol  keywords  ;; list of symbols  schedule  ;; schedule of tasks associated with this person  phone     ;; phone number  fax       ;; fax number  address   ;; list of locations  remarks   ;; ...  notes     ;; list of remarks  (((print self port)    (format port "#{Person (~A) ~A}"	    (object-hash self) 	    (pers-name self)))      ((inorder? self other)    (if (pers? other)        (let ((first (sort-key self))              (second (sort-key other)))           (STRING< first second))        nil))   ((sort-key self)    (if (or (NULL (pers-fname self))            (NULL (pers-lname self)))        (let ((name-list (filter (read-string->list (pers-name self)) stop-table)))            (SETF (pers-fname self) (car name-list))            (SETF (pers-lname self) (last name-list))))    (CONCATENATE 'STRING         (or (and (STRINGP (pers-lname self)) (pers-lname self))            (STRING (pers-lname self)))        (or (and (STRINGP (pers-fname self)) (pers-fname self))            (STRING (pers-fname self)))))   ((id self)    (cond ((NULL (pers-symbol self))           (SETF (pers-symbol self)                (generate-symbol 'pers)))	  (else (pers-symbol self))))      ((print-readable2 self port)    (format port "~%(~A ~A)"            (pers-fname self)            (pers-lname self)))   ((print-header self port . args)    (format port "~%~A ~A~A ~A ~10T~A~A ~50T~A"            (case (CHAR *0*(pers-status self))              ((#\A #\O) #\space)              ((#\P) #\/)              (else  (CHAR *0*(pers-status self))))            (if (pers-current-flag self) "*" " ")            (if (db? (pers-db self)) "db" "  ")            (pers-index self)            (if (db? (pers-db self))                (format nil "~S: " (db-name (pers-db self)))                "")            (pers-name self)            (cond ((pers-phone self)) (else ""))))      ((print-hc self port . args)    (format port "~A ~30T~A~%"            (pers-name self)            (pers-phone self))    (if (pers-fax self)        (format port "  FAX: ~A~%"                (pers-fax self)))    (if (pers-keywords self)        (format port "  ~A~%"                (pers-keywords self)))    (if (pers-address self)        (MAPC #'         #'(LAMBDA (str)           (format port "  ~A~%" str))         (pers-address self))))   ((pretty-print self port)    (MAPC #'     #'(LAMBDA (selector)       (cond ((NULL (selector self))              nil)             ((MEMBER selector (no-pp-fields self))              nil)             ((EQ  (selector-id selector) 'db)              (format port "~%Db: ~15T")              (print (selector self) port))             ((EQ  (selector-id selector) 'notes)              (format port "~%Notes: ~15T********")              (MAPC #'               #'(LAMBDA (note)                 (pretty-print note port))               (selector self)))                          ((or (EQ  (selector-id selector) 'remarks)                  (EQ  (selector-id selector) 'address))              (format port "~%~A:" (capitalize (selector-id selector)))              (MAPC #'               #'(LAMBDA (str)                 (format port "~15T~A~%" str))               (selector self)))                          (else              (format port "~%~A: ~15T"                      (capitalize (selector-id selector)))              (pretty-print (selector self) port))))     (stype-selectors pers-stype)))   ((input-prototype self slot-id)    (case slot-id      ((symbol)        #'(LAMBDA () (generate-symbol 'pers)))      ((status)        #'(LAMBDA () "Active"))      ((name)          #'(LAMBDA () (prompted-string-input "Name: ")))      ((phone)         #'(LAMBDA () (prompted-string-input "Phone: ")))      ((keywords)      #'(LAMBDA () (prompted-list-input "Keywords: ")))      ((address)       #'(LAMBDA () (prompted-string-list-input "Address: ")))      ((date-open)     #'(LAMBDA () (current_date)))      (else            #'(LAMBDA () '()))))   ((update-prototype self slot-id)    (case slot-id      ((status)        #'(LAMBDA () (capitalize (prompted-string-input "Status: "))))      ((name)          #'(LAMBDA () (prompted-string-input "Name: ")))      ((remarks)       #'(LAMBDA () (prompted-string-list-input "Remarks: ")))      ((address)       #'(LAMBDA () (prompted-string-list-input "Address: ")))      ((date-open)     #'(LAMBDA () (prompted-date-input "Date-open: ")))      ((date-closed)   #'(LAMBDA () (prompted-date-input "Date-closed: ")))      ((phone)         #'(LAMBDA () (prompted-string-input "Phone: ")))      ((fax)           #'(LAMBDA () (prompted-string-input "FAX: ")))      ((db)            #'(LAMBDA () (prompted-string-input "Db: ")))      ((fname)         #'(LAMBDA () (prompted-symbol-input "First name: ")))      ((lname)         #'(LAMBDA () (prompted-symbol-input "Last name: ")))      ((keywords)      #'(LAMBDA () (prompted-list-input "Keywords: ")))      ((schedule)      #'(LAMBDA () (prompted-string-input "Schedule: ")))      ((notes)         #'(LAMBDA () (cons (input-values (make-note))                                        (pers-notes self))))      (else            #'(LAMBDA () '()))))   ((no-pp-fields self)    (list pers-index pers-current-flag))   ((no-print-readable-fields self)    (list pers-index pers-current-flag pers-fname pers-lname))      ((table-index-fields self)    (list pers-name pers-keywords))   ))  ;; end of pers structure type ;;  (initialize-entire-structure pers-stype nil);;----------------------------------------------------------;;      Master Data Base of People;;----------------------------------------------------------(DEFVAR pers (make-db)) (SETF (db-data-file pers) "~/t/db/data/pers")(SETF (db-name pers) 'pers) (SETF (db-prompt pers) "PERS> ")(SETF (db-struct pers) pers-stype)(SETF (db-print-file pers) "~/t/db/data/pers.print")(SETF (db-commands pers)        '(          (date-open (date-open open))          (remarks (remarks text))          (notes (notes note))          (status (status st))          (db (db))          (name (name))          (fname (first fname))          (lname (last lname))          (keywords (keywords keys key))          (schedule (schedule))          (address (address))          (phone (phone))          (fax (fax))          ))(init-db pers)